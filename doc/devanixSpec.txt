#    -> Definicion del lenguaje DeVaNix <- 

* * *

A modo de borrador ...

## Consideraciones lexicas

Las palabras reservadas del lenguaje no pueden ser usadas como identificadores
(de variables, funciones etc) y son las siguientes:

    if else for in step while int char bool float array string box union 
    void ...

Los identificadores son secuencias de caracteres alfanumericos, numericos o 
el simbolo *underscore* (_). Debe comenzar con al menos un caracter 
alfanumerico.    

; { } ( ) + * / % [ ] = 

##Tipos

Los tipos que manejará el lenguaje son:

Escalares :

*    **char** 
*    **bool**
*    **int**
*    **float**

Compuestos:

*    **array**
*    **string**
*    **box**
*    **union**

Especial:

*    **void**

##Condicional

sintaxis:

       if cond {
          instrucciones
       }else{
          instrucciones
       }

Se puede obviar la parte del else si se quiere.
las instrucciones dentro del if son opcionales?

##Iteracion acotada 

sintaxis:

       for var in num..num2 step num3{
           instrucciones 
       }

la variable *var* no podra ser modificada por el usuario dentro del bloque 
del for. Los limites del for y el aumento (*num*, *num2*, *num3*) pueden ser
expresiones y serán evaluadas una sola vez antes del primer ciclo. Debe evitar
que las expresiones tengan efectos de borde debido a que la evaluacion de las 
expresiones (*num*,*num2*,*num3*) no garantiza ningun orden en particular.

*num3* debe ser un numero de tipo **int** y a su vez debe ser positivo.

En caso de que los limites sean vacios(*num<num2*) no se ejecutara ningun ciclo
del la iteracion.

## Iteraciones condicionadas 

sintaxis:

       while cond{
          ...
       }

## Declaracion y Asignacion de variables 

Sintaxis de la declaracion de variables:

    tipo nombreVar

El tipo debe ser uno de los mencionados en la seccion de Tipos excepto *void*.
Tambien se puede inicializar la variable en la misma linea si se desea, sin 
embargo si no es inicializada por el usuario no tendra ningun valor 
predeterminado.

Sintaxis de declaracion y asignacion simultanea:

    tipo nombreVar= expresion

En el caso de la inicializacion de un arreglo se tiene la siguiente sintaxis:

    array nombre[num] of tipo

Nuevamente el tipo del contenido del array debe ser cualquiera de los mencionados
en la seccion de tipos exceptuando el tipo void.

Inicializacion del array

**Delclaraciones simultaneas:** DeVaNix permite el uso de las declaraciones 
simultaneas, es decir, mas de una variable puede ser declarada en la misma 
linea. Por ejemplo:

    float num,a,b ;

El lenguaje también soporta la declaración y asignación simultánea ??

    int a,b,c= 5,6,7 ; ?
 
## Pasaje de parametros 

Las funciones en *DeVaNix* poseen la sisguiente sintaxis:

       tipo nombreFunc (tipo arg1, tipo2 arg2 ... ){
          ...
          [return exp]
       }

La instruccion **return** es obligatoria por cualquier camino
 cuando el tipo de la funcion es void. 

El pasaje de parametros es de dos modalidades: Para los tipos escalares se 
tiene que el pasaje es por valor y para los compuestos o estructurados el 
pasaje se hace por referencia. Sin embargo el usuario tiene la opcion de 
realizar el pasaje de tipos escalares por referencia usando el simbolo 
reservado **$** antes del tipo del argumento.

ejemplo:

       int calcularTotal($int monto, $char modo){
          ...
       }

Usar el simbolo **$** para tipos no escalares se considera como un error de 
compilacion.

Para el pasaje en modo *sólo lectura* de los tipos estructurados se 
proporciona el simbolo reservado **$$**. El pasaje a bajo nivel sigue siendo por
referencia pero se considerara como error de compilacion si se usa el nombre 
de la variable del lado izquierdo de una asignacion. 

ejemplo:

       void rentarPelicula($$pelicula peli, $$cliente client1){
          ...
          peli= peli2     ## Error de compilación !! 
       }

los bloques de las funciones pueden ser declaradas en cualquier orden y son 
visibles para cualquier otra funcion o bloque declarado en el mismo nivel de 
alcance.

El caracter utilizado para la separacion de instrucciones sera el caracter 
punto y coma (**;**) o new line.
